arr = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

from collections import deque


def is_in_bounds(grid, x, y):
    return len(grid) - 1 >= x >= 0 and len(grid[0]) - 1 >= y >= 0


def get_unexplored_neighbors(grid, visited, x, y):
    indices_to_check = [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]]
    return [[x, y] for x, y in indices_to_check if
            is_in_bounds(grid, x, y) and grid[x][y] == '1' and not visited[x][y]]


class Solution:
    def numIslands(self, grid):
        if not grid:
            return 0
        h, w = len(grid), len(grid[0])
        visited = [[False for _ in range(w)] for _ in range(h)]
        island_count = 0

        for x, row in enumerate(grid):
            for y, val in enumerate(row):
                if val == '1' and not visited[x][y]:
                    visited[x][y] = True
                    island_count += 1

                    q = deque()
                    q.extend(get_unexplored_neighbors(grid, visited, x, y))

                    while q:
                        i, j = q.popleft()
                        if not visited[i][j]:
                            q.extend(get_unexplored_neighbors(grid, visited, i, j))
                        visited[i][j] = True


        return island_count

print(Solution.numIslands(None, arr))

